@model List<SharedClassLibrary.Domain.Notification>

<div class="relative inline-block">
    <!-- Notification Button -->
    <button id="notificationsButton" class="relative bg-gray-700 hover:bg-gray-600 text-white p-2 rounded-full focus:outline-none">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
        </svg>
        <!-- Dynamic Unread Count Badge -->
        <span id="unreadCountBadge"
              class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-4 w-4 flex items-center justify-center hidden">
        </span>
    </button>

    <!-- Notification Dropdown -->
    <div id="notificationsDropdown" class="absolute right-0 mt-2 w-80 bg-white border border-gray-300 rounded-lg shadow-lg hidden">
        <div class="p-4 bg-gray-800 text-white flex justify-between items-center">
            <h3 class="text-lg font-semibold">Notifications</h3>
            <button id="markAllAsReadButton" class="text-sm bg-blue-500 hover:bg-blue-600 text-white py-1 px-2 rounded-md">
                Mark All as Read
            </button>
        </div>
        <div id="notificationsContent" class="max-h-64 overflow-y-auto">
            <div class="p-4 text-center text-gray-500">
                <p>Loading notifications...</p>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const notificationsButton = document.getElementById('notificationsButton');
        const notificationsDropdown = document.getElementById('notificationsDropdown');
        const notificationsContent = document.getElementById('notificationsContent');
        const markAllAsReadButton = document.getElementById('markAllAsReadButton');
        const unreadCountBadge = document.getElementById('unreadCountBadge');

        // Load unread count on page load
        fetch('/Notifications/Count', {
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.count > 0) {
                unreadCountBadge.textContent = data.count > 9 ? '9+' : data.count;
                unreadCountBadge.classList.remove('hidden');
            }
        })
        .catch(error => {
            console.error('Error loading unread count:', error);
        });

        // Toggle dropdown and fetch notifications
        notificationsButton.addEventListener('click', async function (e) {
            e.preventDefault();
            notificationsDropdown.classList.toggle('hidden');

            if (!notificationsDropdown.classList.contains('hidden')) {
                try {
                    const response = await fetch('/Notifications', {
                        method: 'GET',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                        },
                    });

                    if (!response.ok) throw new Error('Failed to fetch notifications');

                    const notifications = await response.json();
                    renderNotifications(notifications);
                } catch (error) {
                    console.error('Error fetching notifications:', error);
                    notificationsContent.innerHTML = '<div class="p-4 text-center text-red-500"><p>Failed to load notifications.</p></div>';
                }
            }
        });

        // Mark all as read
        markAllAsReadButton.addEventListener('click', function () {
            fetch('/Notifications/MarkAllAsRead', {
                method: 'POST',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'Content-Type': 'application/json',
                }
            })
            .then(response => {
                if (!response.ok) throw new Error('Failed to mark all as read');
                return response.json();
            })
            .then(() => {
                location.reload();
            })
            .catch(error => {
                console.error('Error marking notifications as read:', error);
            });
        });

        // Close dropdown on outside click
        document.addEventListener('click', function (e) {
            if (!notificationsDropdown.contains(e.target) && !notificationsButton.contains(e.target)) {
                notificationsDropdown.classList.add('hidden');
            }
        });

        function renderNotifications(notifications) {
            if (notifications.length === 0) {
                notificationsContent.innerHTML = '<div class="p-4 text-center text-gray-500"><p>No notifications to display</p></div>';
            } else {
                notificationsContent.innerHTML = `
                    <ul class="divide-y divide-gray-200">
                        ${notifications.map(n => `
                            <li class="p-4 hover:bg-gray-50 transition ${n.isRead ? '' : 'bg-blue-50'}">
                                <div class="flex justify-between items-start">
                                    <p class="text-sm text-gray-700 ${n.isRead ? '' : 'font-semibold'}">${n.content}</p>
                                    <span class="text-xs text-gray-500 whitespace-nowrap ml-4">${new Date(n.timestamp).toLocaleString()}</span>
                                </div>
                            </li>
                        `).join('')}
                    </ul>
                `;
            }
        }
    });
</script>
