// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.DBConnection;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(MarketPlaceDbContext))]
    [Migration("20250428002714_BuyerConfiguration0")]
    partial class BuyerConfiguration0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Server.DataModels.BuyerCartItemEntity", b =>
                {
                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("BuyerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("BuyerCartItems");
                });

            modelBuilder.Entity("Server.DataModels.BuyerLinkageEntity", b =>
                {
                    b.Property<int>("RequestingBuyerId")
                        .HasColumnType("int");

                    b.Property<int>("ReceivingBuyerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.HasKey("RequestingBuyerId", "ReceivingBuyerId");

                    b.HasIndex("ReceivingBuyerId");

                    b.ToTable("BuyerLinkages", t =>
                        {
                            t.HasCheckConstraint("CK_BuyerLinkage_DifferentBuyers", "[RequestingBuyerId] <> [ReceivingBuyerId]");
                        });
                });

            modelBuilder.Entity("Server.DataModels.BuyerWishlistItemsEntity", b =>
                {
                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("BuyerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("BuyerWishlistItems");
                });

            modelBuilder.Entity("Server.DataModels.DummyCardEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<string>("CVC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardholderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BuyerId");

                    b.HasIndex("CardNumber");

                    b.ToTable("DummyCards");
                });

            modelBuilder.Entity("Server.DataModels.DummyWalletEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BuyerId")
                        .IsUnique();

                    b.ToTable("DummyWallets");
                });

            modelBuilder.Entity("Server.DataModels.FollowingEntity", b =>
                {
                    b.Property<int>("BuyerId")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("BuyerId", "SellerId");

                    b.HasIndex("SellerId");

                    b.ToTable("Followings");
                });

            modelBuilder.Entity("Server.DataModels.OrderNotificationEntity", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ContractID")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("DeliveryDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("RecipientID")
                        .HasColumnType("int");

                    b.Property<string>("ShippingState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("NotificationID");

                    b.HasIndex("ContractID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.HasIndex("RecipientID");

                    b.ToTable("OrderNotifications", t =>
                        {
                            t.HasCheckConstraint("NotificationCategoryConstraint", "[Category] IN ('CONTRACT_EXPIRATION', 'OUTBIDDED', 'ORDER_SHIPPING_PROGRESS', 'PRODUCT_AVAILABLE', 'PAYMENT_CONFIRMATION', 'PRODUCT_REMOVED', 'CONTRACT_RENEWAL_REQ', 'CONTRACT_RENEWAL_ANS', 'CONTRACT_RENEWAL_WAITLIST')");
                        });
                });

            modelBuilder.Entity("Server.DataModels.SellerNotificationEntity", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<int>("NotificationFollowerCount")
                        .HasColumnType("int");

                    b.Property<string>("NotificationMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SellerID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("SellerID");

                    b.ToTable("SellerNotifications");
                });

            modelBuilder.Entity("Server.DataModels.WaitlistProductEntity", b =>
                {
                    b.Property<int>("WaitlistProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WaitlistProductID"));

                    b.Property<DateTime>("AvailableAgain")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("WaitlistProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("WaitlistProducts");
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.Buyer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Badge")
                        .HasColumnType("int");

                    b.Property<int>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPurchases")
                        .HasColumnType("int");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalSpending")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("UseSameAddress")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.Contract", b =>
                {
                    b.Property<long>("ContractID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ContractID"));

                    b.Property<string>("AdditionalTerms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("PDFID")
                        .HasColumnType("int");

                    b.Property<int?>("PredefinedContractID")
                        .HasColumnType("int");

                    b.Property<int>("RenewalCount")
                        .HasColumnType("int");

                    b.Property<long?>("RenewedFromContractID")
                        .HasColumnType("bigint");

                    b.HasKey("ContractID");

                    b.HasIndex("OrderID");

                    b.HasIndex("PDFID");

                    b.HasIndex("PredefinedContractID");

                    b.ToTable("Contracts", t =>
                        {
                            t.HasCheckConstraint("ContractStatusConstraint", "[ContractStatus] IN ('ACTIVE', 'RENEWED', 'EXPIRED')");
                        });
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int>("BuyerID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("OrderDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrderHistoryID")
                        .HasColumnType("int");

                    b.Property<int>("OrderSummaryID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderID");

                    b.HasIndex("BuyerID");

                    b.HasIndex("OrderHistoryID");

                    b.HasIndex("OrderSummaryID");

                    b.HasIndex("ProductID");

                    b.ToTable("Orders", t =>
                        {
                            t.HasCheckConstraint("PaymentMethodConstraint", "[PaymentMethod] IN ('card', 'wallet', 'cash')");
                        });
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.OrderCheckpoint", b =>
                {
                    b.Property<int>("CheckpointID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckpointID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrackedOrderID")
                        .HasColumnType("int");

                    b.HasKey("CheckpointID");

                    b.HasIndex("TrackedOrderID");

                    b.ToTable("OrderCheckpoints", t =>
                        {
                            t.HasCheckConstraint("OrderChekpointConstraint", "[Status] IN ('PROCESSING', 'SHIPPED', 'IN_WAREHOUSE', 'IN_TRANSIT', 'OUT_FOR_DELIVERY', 'DELIVERED')");
                        });
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.OrderHistory", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.HasKey("OrderID");

                    b.ToTable("OrderHistory");
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.OrderSummary", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("DeliveryFee")
                        .HasColumnType("real");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("FinalTotal")
                        .HasColumnType("real");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Subtotal")
                        .HasColumnType("real");

                    b.Property<float>("WarrantyTax")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.ToTable("OrderSummary");
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.PDF", b =>
                {
                    b.Property<int>("PdfID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PdfID"));

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PdfID");

                    b.ToTable("PDFs");
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.PredefinedContract", b =>
                {
                    b.Property<int>("ContractID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractID"));

                    b.Property<string>("ContractContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContractID");

                    b.ToTable("PredefinedContracts");
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("SellerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.Seller", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("FollowersCount")
                        .HasColumnType("int");

                    b.Property<string>("StoreAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TrustScore")
                        .HasColumnType("float");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.TrackedOrder", b =>
                {
                    b.Property<int>("TrackedOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackedOrderID"));

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EstimatedDeliveryDate")
                        .HasColumnType("date");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.HasKey("TrackedOrderID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("TrackedOrders", t =>
                        {
                            t.HasCheckConstraint("TrackedOrderConstraint", "[CurrentStatus] IN ('PROCESSING', 'SHIPPED', 'IN_WAREHOUSE', 'IN_TRANSIT', 'OUT_FOR_DELIVERY', 'DELIVERED')");
                        });
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("BannedUntil")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FailedLogins")
                        .HasColumnType("int");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.UserWaitList", b =>
                {
                    b.Property<int>("UserWaitListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserWaitListID"));

                    b.Property<DateTime>("JoinedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PositionInQueue")
                        .HasColumnType("int");

                    b.Property<int>("ProductWaitListID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserWaitListID");

                    b.HasIndex("ProductWaitListID");

                    b.HasIndex("UserID");

                    b.ToTable("UserWaitList");
                });

            modelBuilder.Entity("Server.DataModels.BuyerCartItemEntity", b =>
                {
                    b.HasOne("SharedClassLibrary.Domain.Buyer", null)
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SharedClassLibrary.Domain.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.DataModels.BuyerLinkageEntity", b =>
                {
                    b.HasOne("SharedClassLibrary.Domain.Buyer", null)
                        .WithMany()
                        .HasForeignKey("ReceivingBuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SharedClassLibrary.Domain.Buyer", null)
                        .WithMany()
                        .HasForeignKey("RequestingBuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.DataModels.BuyerWishlistItemsEntity", b =>
                {
                    b.HasOne("SharedClassLibrary.Domain.Buyer", null)
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SharedClassLibrary.Domain.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.DataModels.DummyCardEntity", b =>
                {
                    b.HasOne("SharedClassLibrary.Domain.Buyer", null)
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.DataModels.DummyWalletEntity", b =>
                {
                    b.HasOne("SharedClassLibrary.Domain.Buyer", null)
                        .WithOne()
                        .HasForeignKey("Server.DataModels.DummyWalletEntity", "BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.DataModels.FollowingEntity", b =>
                {
                    b.HasOne("SharedClassLibrary.Domain.Buyer", null)
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SharedClassLibrary.Domain.Seller", null)
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.DataModels.OrderNotificationEntity", b =>
                {
                    b.HasOne("SharedClassLibrary.Domain.Contract", null)
                        .WithMany()
                        .HasForeignKey("ContractID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SharedClassLibrary.Domain.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SharedClassLibrary.Domain.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SharedClassLibrary.Domain.Buyer", null)
                        .WithMany()
                        .HasForeignKey("RecipientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.DataModels.SellerNotificationEntity", b =>
                {
                    b.HasOne("SharedClassLibrary.Domain.Seller", null)
                        .WithMany()
                        .HasForeignKey("SellerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.DataModels.WaitlistProductEntity", b =>
                {
                    b.HasOne("SharedClassLibrary.Domain.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.Buyer", b =>
                {
                    b.HasOne("SharedClassLibrary.Domain.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SharedClassLibrary.Domain.User", "User")
                        .WithOne()
                        .HasForeignKey("SharedClassLibrary.Domain.Buyer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedClassLibrary.Domain.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingAddress");

                    b.Navigation("ShippingAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.Contract", b =>
                {
                    b.HasOne("SharedClassLibrary.Domain.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SharedClassLibrary.Domain.PDF", null)
                        .WithMany()
                        .HasForeignKey("PDFID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SharedClassLibrary.Domain.PredefinedContract", null)
                        .WithMany()
                        .HasForeignKey("PredefinedContractID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.Order", b =>
                {
                    b.HasOne("SharedClassLibrary.Domain.Buyer", null)
                        .WithMany()
                        .HasForeignKey("BuyerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SharedClassLibrary.Domain.OrderHistory", null)
                        .WithMany()
                        .HasForeignKey("OrderHistoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SharedClassLibrary.Domain.OrderSummary", null)
                        .WithMany()
                        .HasForeignKey("OrderSummaryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SharedClassLibrary.Domain.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.OrderCheckpoint", b =>
                {
                    b.HasOne("SharedClassLibrary.Domain.TrackedOrder", null)
                        .WithMany()
                        .HasForeignKey("TrackedOrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.Product", b =>
                {
                    b.HasOne("SharedClassLibrary.Domain.Seller", null)
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.Review", b =>
                {
                    b.HasOne("SharedClassLibrary.Domain.Seller", null)
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.Seller", b =>
                {
                    b.HasOne("SharedClassLibrary.Domain.User", "User")
                        .WithOne()
                        .HasForeignKey("SharedClassLibrary.Domain.Seller", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.TrackedOrder", b =>
                {
                    b.HasOne("SharedClassLibrary.Domain.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedClassLibrary.Domain.UserWaitList", b =>
                {
                    b.HasOne("Server.DataModels.WaitlistProductEntity", null)
                        .WithMany()
                        .HasForeignKey("ProductWaitListID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SharedClassLibrary.Domain.Buyer", null)
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
